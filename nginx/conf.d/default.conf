#server {
#	listen 80 default_server;
#	listen [::]:80;
#	server_name _;
#	return 444;
#}

upstream app {
	server app:3000;
}

server {
	listen 80;
	listen [::]:80;
	server_name localhost;

	location / {
		return 301 https://$host$request_uri;
	}
}

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	server_name localhost;

	# certificate can be alone or made up of cert + intermediates
	ssl_certificate "/etc/ssl/certs/localhost.crt.pem";
	ssl_certificate_key "/etc/ssl/private/localhost.key.pem";
	ssl_session_timeout 1d;
	ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
	ssl_session_tickets off;

	# curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
	ssl_dhparam "/etc/ssl/certs/dhparam.pem";

	# intermediate configuration
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
	ssl_prefer_server_ciphers off;

	# HSTS (ngx_http_headers_module is required) (63072000 seconds)
	add_header Strict-Transport-Security "max-age=63072000" always;

	# OCSP stapling
	ssl_stapling on;
	ssl_stapling_verify on;

	# verify chain of trust of OCSP response using Root CA and Intermediate certs
	ssl_trusted_certificate "/etc/ssl/certs/localhost.full.pem";

	# Clients should transform http requests to https
	add_header "Content-Security-Policy" "upgrade-insecure-requests";

	location / {
		proxy_pass http://app;
	}
}
